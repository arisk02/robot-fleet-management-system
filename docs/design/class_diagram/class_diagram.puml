@startuml
Class cleaningSystem{
    -robotList : map<int, robot*>
    -roomList : map<int, room>
    -futures : List<future<void>>
    -robotCounter : int
    -roomCounter : int
    -logFilename : string

    +queryRobotStatus(listRobots)
    +queryRobotStatus()
    +queryRoomStatus(listRooms)
    +queryRoomStatus()
    +getRoomCount()
    +getRobotCount()
    +clean(room, listRobots)
    +cleanAsync(listRobots, cleaningTime, roomID)
    +repair(listRobots)
    +recharge(listRobots)
    +loggerSetup(filename)
    +log()
    +validateRobotIDs(listRobots)
    +validateRoomIDs(listRooms)
    +validateRoomIDs(roomID)

}
Abstract class Robot{
    -robotId : int
    -type : enum
    -size : enum
    -cleanTime : int
    -breakOdds : const float
    -maxBattery : const int
    -batteryLevel : int
    -status : enum
    -lastUsed : time_t
    +getRobotId()
    +getRobotSize()
    +getRobotType()
    +getRobotBatteryLevel()
    +getRobotMaxBattery()
    +setRobotBatteryLevel()
    +getRobotCleanTime()
    +getRobotBreakOdds()
    +setRobotStatus()
    +setRobotLastUsed()
    +getRobotLastUsed()
    +fixRobot()
    +chargeRobot()
}
class Sweeper
class Vacuum
class Mopper
class Room{
    -id : int
    -size : enum
    -clean : Boolean
    -occupied : Boolean
    +getClean()
    +setClean(newClean)
    +getSize()
    +setSize(newSize)
    +getOccupiedByRobot()
    +setOccupiedByRobot(newOccupied)
    +getId()
}
cleaningSystem *-- Robot
Robot <|-- Sweeper
Robot <|-- Vacuum
Robot <|-- Mopper
cleaningSystem *-- Room

@enduml